{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name posh.core, :imports nil, :requires {u posh.lib.update, posh.lib.util posh.lib.util, posh.lib.q-analyze posh.lib.q-analyze, posh.lib.db posh.lib.db, db posh.lib.db, dm posh.lib.datom-matcher, posh.lib.graph posh.lib.graph, util posh.lib.util, posh.lib.datom-matcher posh.lib.datom-matcher, posh.lib.pull-analyze posh.lib.pull-analyze, pa posh.lib.pull-analyze, qa posh.lib.q-analyze, graph posh.lib.graph, posh.lib.update posh.lib.update}, :cljs.spec/speced-vars [], :uses nil, :defs {process-tx! {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/core.cljc", :line 225, :column 7, :end-line 225, :end-column 18, :arglists (quote ([{:keys [dcfg txs], :as posh-tree}]))}, :name posh.core/process-tx!, :variadic false, :file "resources/public/js/compiled/out/posh/core.cljc", :end-column 18, :method-params ([p__36389]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 225, :end-line 225, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [dcfg txs], :as posh-tree}]))}, set-db {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/core.cljc", :line 53, :column 7, :end-line 53, :end-column 13, :arglists (quote ([posh-tree db-id db] [{:keys [dbs graph cache], :as posh-tree} db-id db filter-pred])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([posh-tree db-id db] [{:keys [dbs graph cache], :as posh-tree} db-id db filter-pred]), :arglists ([posh-tree db-id db] [{:keys [dbs graph cache], :as posh-tree} db-id db filter-pred]), :arglists-meta (nil nil)}}, :name posh.core/set-db, :variadic false, :file "resources/public/js/compiled/out/posh/core.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([posh-tree db-id db] [{:keys [dbs graph cache], :as posh-tree} db-id db filter-pred]), :arglists ([posh-tree db-id db] [{:keys [dbs graph cache], :as posh-tree} db-id db filter-pred]), :arglists-meta (nil nil)}, :method-params ([posh-tree db-id db] [{:keys [dbs graph cache], :as posh-tree} db-id db filter-pred]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 4, :fn-var true, :arglists ([posh-tree db-id db] [{:keys [dbs graph cache], :as posh-tree} db-id db filter-pred])}, add-db {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/core.cljc", :line 38, :column 7, :end-line 38, :end-column 13, :arglists (quote ([posh-tree db-id conn schema] [{:keys [dcfg conns schemas dbs cache graph], :as posh-tree} db-id conn schema base-filters])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([posh-tree db-id conn schema] [{:keys [dcfg conns schemas dbs cache graph], :as posh-tree} db-id conn schema base-filters]), :arglists ([posh-tree db-id conn schema] [{:keys [dcfg conns schemas dbs cache graph], :as posh-tree} db-id conn schema base-filters]), :arglists-meta (nil nil)}}, :name posh.core/add-db, :variadic false, :file "resources/public/js/compiled/out/posh/core.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([posh-tree db-id conn schema] [{:keys [dcfg conns schemas dbs cache graph], :as posh-tree} db-id conn schema base-filters]), :arglists ([posh-tree db-id conn schema] [{:keys [dcfg conns schemas dbs cache graph], :as posh-tree} db-id conn schema base-filters]), :arglists-meta (nil nil)}, :method-params ([posh-tree db-id conn schema] [{:keys [dcfg conns schemas dbs cache graph], :as posh-tree} db-id conn schema base-filters]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 5, :fn-var true, :arglists ([posh-tree db-id conn schema] [{:keys [dcfg conns schemas dbs cache graph], :as posh-tree} db-id conn schema base-filters])}, add-filter-tx {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/core.cljc", :line 63, :column 7, :end-line 63, :end-column 20, :arglists (quote ([{:keys [cache graph], :as posh-tree} poshdb tx-patterns]))}, :name posh.core/add-filter-tx, :variadic false, :file "resources/public/js/compiled/out/posh/core.cljc", :end-column 20, :method-params ([p__36329 poshdb tx-patterns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [cache graph], :as posh-tree} poshdb tx-patterns]))}, add-pull {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/core.cljc", :line 106, :column 7, :end-line 106, :end-column 15, :arglists (quote ([{:keys [graph cache dcfg conns conns-by-id retrieve], :as posh-tree} poshdb pull-pattern eid]))}, :name posh.core/add-pull, :variadic false, :file "resources/public/js/compiled/out/posh/core.cljc", :end-column 15, :method-params ([p__36346 poshdb pull-pattern eid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 4, :fn-var true, :arglists (quote ([{:keys [graph cache dcfg conns conns-by-id retrieve], :as posh-tree} poshdb pull-pattern eid]))}, add-filter-pull {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/core.cljc", :line 75, :column 7, :end-line 75, :end-column 22, :arglists (quote ([{:keys [cache graph dcfg conns conns-by-id], :as posh-tree} poshdb pull-pattern eid]))}, :name posh.core/add-filter-pull, :variadic false, :file "resources/public/js/compiled/out/posh/core.cljc", :end-column 22, :method-params ([p__36332 poshdb pull-pattern eid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 4, :fn-var true, :arglists (quote ([{:keys [cache graph dcfg conns conns-by-id], :as posh-tree} poshdb pull-pattern eid]))}, add-tx {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/core.cljc", :line 185, :column 7, :end-line 185, :end-column 13, :arglists (quote ([{:keys [txs conns], :as posh-tree} poshdb tx]))}, :name posh.core/add-tx, :variadic false, :file "resources/public/js/compiled/out/posh/core.cljc", :end-column 13, :method-params ([p__36368 poshdb tx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [txs conns], :as posh-tree} poshdb tx]))}, remove-item {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/core.cljc", :line 135, :column 7, :end-line 135, :end-column 18, :arglists (quote ([{:keys [graph cache], :as posh-tree} storage-key]))}, :name posh.core/remove-item, :variadic false, :file "resources/public/js/compiled/out/posh/core.cljc", :end-column 18, :method-params ([p__36360 storage-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [graph cache], :as posh-tree} storage-key]))}, empty-tree {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/core.cljc", :line 25, :column 7, :end-line 25, :end-column 17, :arglists (quote ([{:keys [q pull filter entid db], :as dcfg} retrieve]))}, :name posh.core/empty-tree, :variadic false, :file "resources/public/js/compiled/out/posh/core.cljc", :end-column 17, :method-params ([p__36314 retrieve]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [q pull filter entid db], :as dcfg} retrieve]))}, add-filter-q {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/core.cljc", :line 89, :column 7, :end-line 89, :end-column 19, :arglists (quote ([{:keys [graph cache dcfg retrieve conns conns-by-id], :as posh-tree} query & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [({:keys [graph cache dcfg retrieve conns conns-by-id], :as posh-tree} query args)], :arglists ([{:keys [graph cache dcfg retrieve conns conns-by-id], :as posh-tree} query & args]), :arglists-meta (nil)}}, :name posh.core/add-filter-q, :variadic true, :file "resources/public/js/compiled/out/posh/core.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [({:keys [graph cache dcfg retrieve conns conns-by-id], :as posh-tree} query args)], :arglists ([{:keys [graph cache dcfg retrieve conns conns-by-id], :as posh-tree} query & args]), :arglists-meta (nil)}, :method-params [({:keys [graph cache dcfg retrieve conns conns-by-id], :as posh-tree} query args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 2, :fn-var true, :arglists ([{:keys [graph cache dcfg retrieve conns conns-by-id], :as posh-tree} query & args])}, merge-txs {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/core.cljc", :line 182, :column 7, :end-line 182, :end-column 16, :arglists (quote ([oldtx newtx]))}, :name posh.core/merge-txs, :variadic false, :file "resources/public/js/compiled/out/posh/core.cljc", :end-column 16, :method-params ([oldtx newtx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 2, :fn-var true, :arglists (quote ([oldtx newtx]))}, cache-changes {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/core.cljc", :line 143, :column 7, :end-line 143, :end-column 20, :arglists (quote ([{:keys [graph cache], :as posh-tree} db-id tx new-cache storage-key]))}, :name posh.core/cache-changes, :variadic false, :file "resources/public/js/compiled/out/posh/core.cljc", :end-column 20, :method-params ([p__36363 db-id tx new-cache storage-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 5, :fn-var true, :arglists (quote ([{:keys [graph cache], :as posh-tree} db-id tx new-cache storage-key]))}, after-transact {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/core.cljc", :line 198, :column 7, :end-line 198, :end-column 21, :arglists (quote ([{:keys [conns dcfg dbs filters cache], :as posh-tree} conns-results]))}, :name posh.core/after-transact, :variadic false, :file "resources/public/js/compiled/out/posh/core.cljc", :end-column 21, :method-params ([p__36371 conns-results]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [conns dcfg dbs filters cache], :as posh-tree} conns-results]))}, group-db-ids-by-conn {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/core.cljc", :line 191, :column 7, :end-line 191, :end-column 27, :arglists (quote ([conns]))}, :name posh.core/group-db-ids-by-conn, :variadic false, :file "resources/public/js/compiled/out/posh/core.cljc", :end-column 27, :method-params ([conns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 1, :fn-var true, :arglists (quote ([conns]))}, add-q {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/core.cljc", :line 121, :column 7, :end-line 121, :end-column 12, :arglists (quote ([{:keys [cache graph dcfg conns retrieve], :as posh-tree} query & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [({:keys [cache graph dcfg conns retrieve], :as posh-tree} query args)], :arglists ([{:keys [cache graph dcfg conns retrieve], :as posh-tree} query & args]), :arglists-meta (nil)}}, :name posh.core/add-q, :variadic true, :file "resources/public/js/compiled/out/posh/core.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [({:keys [cache graph dcfg conns retrieve], :as posh-tree} query args)], :arglists ([{:keys [cache graph dcfg conns retrieve], :as posh-tree} query & args]), :arglists-meta (nil)}, :method-params [({:keys [cache graph dcfg conns retrieve], :as posh-tree} query args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 2, :fn-var true, :arglists ([{:keys [cache graph dcfg conns retrieve], :as posh-tree} query & args])}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:q :reload-fn :db-after :db :filters :return :tx-t :retrieve :txs :transact! :filter-pull :tx-data :dbvarmap :filter :filter-q :cache :dbs :schemas :analysis :filter-tx :conns-by-id :changed :graph :entid :outputs :reload-patterns :dcfg :pull :conns :pass-patterns}, :order [:q :pull :filter :entid :db :filters :retrieve :txs :cache :dbs :schemas :graph :dcfg :conns :return :pass-patterns :filter-tx :conns-by-id :filter-pull :filter-q :analysis :dbvarmap :tx-t :reload-patterns :reload-fn :outputs :db-after :tx-data :changed :transact!]}, :doc nil}