{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name posh.lib.datom-matcher, :imports nil, :requires {cs clojure.set, clojure.set clojure.set}, :cljs.spec/speced-vars [], :uses nil, :defs {datom-match-pattern? {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/datom_matcher.cljc", :line 4, :column 7, :end-line 4, :end-column 27, :arglists (quote ([pattern datom]))}, :name posh.lib.datom-matcher/datom-match-pattern?, :variadic false, :file "resources/public/js/compiled/out/posh/lib/datom_matcher.cljc", :end-column 27, :method-params ([pattern datom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pattern datom]))}, datom-match? {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/datom_matcher.cljc", :line 14, :column 7, :end-line 14, :end-column 19, :arglists (quote ([patterns datom]))}, :name posh.lib.datom-matcher/datom-match?, :variadic false, :file "resources/public/js/compiled/out/posh/lib/datom_matcher.cljc", :end-column 19, :method-params ([patterns datom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([patterns datom]))}, any-datoms-match? {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/datom_matcher.cljc", :line 17, :column 7, :end-line 17, :end-column 24, :arglists (quote ([patterns datoms]))}, :name posh.lib.datom-matcher/any-datoms-match?, :variadic false, :file "resources/public/js/compiled/out/posh/lib/datom_matcher.cljc", :end-column 24, :method-params ([patterns datoms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([patterns datoms]))}, matching-datoms {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/datom_matcher.cljc", :line 24, :column 7, :end-line 24, :end-column 22, :arglists (quote ([patterns datoms]))}, :name posh.lib.datom-matcher/matching-datoms, :variadic false, :file "resources/public/js/compiled/out/posh/lib/datom_matcher.cljc", :end-column 22, :method-params ([patterns datoms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([patterns datoms]))}, combine-entids {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/datom_matcher.cljc", :line 31, :column 7, :end-line 31, :end-column 21, :arglists (quote ([entids rest-datom patterns new-patterns leftover-patterns]))}, :name posh.lib.datom-matcher/combine-entids, :variadic false, :file "resources/public/js/compiled/out/posh/lib/datom_matcher.cljc", :end-column 21, :method-params ([entids rest-datom patterns new-patterns leftover-patterns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 5, :fn-var true, :arglists (quote ([entids rest-datom patterns new-patterns leftover-patterns]))}, reduce-patterns {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/datom_matcher.cljc", :line 46, :column 7, :end-line 46, :end-column 22, :arglists (quote ([patterns]))}, :name posh.lib.datom-matcher/reduce-patterns, :variadic false, :file "resources/public/js/compiled/out/posh/lib/datom_matcher.cljc", :end-column 22, :method-params ([patterns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([patterns]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:leftover-patterns :new-patterns :else _}, :order [_ :else :new-patterns :leftover-patterns]}, :doc nil}