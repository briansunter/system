{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name posh.lib.graph, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {remove-dep {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/graph.cljc", :line 51, :column 7, :end-line 51, :end-column 17, :arglists (quote ([graph k dep-k]))}, :name posh.lib.graph/remove-dep, :variadic false, :file "resources/public/js/compiled/out/posh/lib/graph.cljc", :end-column 17, :method-params ([graph k dep-k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 3, :fn-var true, :arglists (quote ([graph k dep-k]))}, remove-input {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/graph.cljc", :line 43, :column 7, :end-line 43, :end-column 19, :arglists (quote ([graph item-k input]))}, :name posh.lib.graph/remove-input, :variadic false, :file "resources/public/js/compiled/out/posh/lib/graph.cljc", :end-column 19, :method-params ([graph item-k input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 3, :fn-var true, :arglists (quote ([graph item-k input]))}, remove-output {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/graph.cljc", :line 47, :column 7, :end-line 47, :end-column 20, :arglists (quote ([graph item-k output]))}, :name posh.lib.graph/remove-output, :variadic false, :file "resources/public/js/compiled/out/posh/lib/graph.cljc", :end-column 20, :method-params ([graph item-k output]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 3, :fn-var true, :arglists (quote ([graph item-k output]))}, add-item-full {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/graph.cljc", :line 26, :column 7, :end-line 26, :end-column 20, :arglists (quote ([graph item-k inputs outputs]))}, :name posh.lib.graph/add-item-full, :variadic false, :file "resources/public/js/compiled/out/posh/lib/graph.cljc", :end-column 20, :method-params ([graph item-k inputs outputs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 4, :fn-var true, :arglists (quote ([graph item-k inputs outputs]))}, add-item {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/graph.cljc", :line 14, :column 7, :end-line 14, :end-column 15, :arglists (quote ([graph item-k]))}, :name posh.lib.graph/add-item, :variadic false, :file "resources/public/js/compiled/out/posh/lib/graph.cljc", :end-column 15, :method-params ([graph item-k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([graph item-k]))}, add-item-connect {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/graph.cljc", :line 34, :column 7, :end-line 34, :end-column 23, :arglists (quote ([graph item-k inputs]))}, :name posh.lib.graph/add-item-connect, :variadic false, :file "resources/public/js/compiled/out/posh/lib/graph.cljc", :end-column 23, :method-params ([graph item-k inputs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 3, :fn-var true, :arglists (quote ([graph item-k inputs]))}, new-graph {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/graph.cljc", :line 10, :column 7, :end-line 10, :end-column 16, :arglists (quote ([]))}, :name posh.lib.graph/new-graph, :variadic false, :file "resources/public/js/compiled/out/posh/lib/graph.cljc", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, add-output {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/graph.cljc", :line 23, :column 7, :end-line 23, :end-column 17, :arglists (quote ([graph item-k output]))}, :name posh.lib.graph/add-output, :variadic false, :file "resources/public/js/compiled/out/posh/lib/graph.cljc", :end-column 17, :method-params ([graph item-k output]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 3, :fn-var true, :arglists (quote ([graph item-k output]))}, remove-item {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/graph.cljc", :line 55, :column 7, :end-line 55, :end-column 18, :arglists (quote ([graph item-k]))}, :name posh.lib.graph/remove-item, :variadic false, :file "resources/public/js/compiled/out/posh/lib/graph.cljc", :end-column 18, :method-params ([graph item-k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists (quote ([graph item-k]))}, add-input {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/graph.cljc", :line 19, :column 7, :end-line 19, :end-column 16, :arglists (quote ([graph item-k input]))}, :name posh.lib.graph/add-input, :variadic false, :file "resources/public/js/compiled/out/posh/lib/graph.cljc", :end-column 16, :method-params ([graph item-k input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 3, :fn-var true, :arglists (quote ([graph item-k input]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:inputs :outputs}, :order [:inputs :outputs]}, :doc nil}