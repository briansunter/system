{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name posh.lib.update, :imports nil, :requires {posh.lib.util posh.lib.util, posh.lib.q-analyze posh.lib.q-analyze, posh.lib.db posh.lib.db, datascript.core datascript.core, db posh.lib.db, dm posh.lib.datom-matcher, util posh.lib.util, posh.lib.datom-matcher posh.lib.datom-matcher, posh.lib.pull-analyze posh.lib.pull-analyze, pa posh.lib.pull-analyze, qa posh.lib.q-analyze, d datascript.core}, :cljs.spec/speced-vars [], :uses nil, :defs {update-pull {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/update.cljc", :line 9, :column 7, :end-line 9, :end-column 18, :arglists (quote ([{:keys [dcfg retrieve], :as posh-tree} storage-key]))}, :name posh.lib.update/update-pull, :variadic false, :file "resources/public/js/compiled/out/posh/lib/update.cljc", :end-column 18, :method-params ([p__36284 storage-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [dcfg retrieve], :as posh-tree} storage-key]))}, update-filter-pull {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/update.cljc", :line 23, :column 7, :end-line 23, :end-column 25, :arglists (quote ([{:keys [dcfg retrieve], :as posh-tree} storage-key]))}, :name posh.lib.update/update-filter-pull, :variadic false, :file "resources/public/js/compiled/out/posh/lib/update.cljc", :end-column 25, :method-params ([p__36290 storage-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [dcfg retrieve], :as posh-tree} storage-key]))}, update-q {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/update.cljc", :line 64, :column 7, :end-line 64, :end-column 15, :arglists (quote ([posh-tree storage-key]))}, :name posh.lib.update/update-q, :variadic false, :file "resources/public/js/compiled/out/posh/lib/update.cljc", :end-column 15, :method-params ([posh-tree storage-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([posh-tree storage-key]))}, update-q-with-dbvarmap {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/update.cljc", :line 40, :column 7, :end-line 40, :end-column 29, :arglists (quote ([{:keys [dcfg retrieve], :as posh-tree} storage-key]))}, :name posh.lib.update/update-q-with-dbvarmap, :variadic false, :file "resources/public/js/compiled/out/posh/lib/update.cljc", :end-column 29, :method-params ([p__36296 storage-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [dcfg retrieve], :as posh-tree} storage-key]))}, reduce-entities {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/update.cljc", :line 68, :column 7, :end-line 68, :end-column 22, :arglists (quote ([r]))}, :name posh.lib.update/reduce-entities, :variadic false, :file "resources/public/js/compiled/out/posh/lib/update.cljc", :end-column 22, :method-params ([r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([r]))}, update-filter-q {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/update.cljc", :line 81, :column 7, :end-line 81, :end-column 22, :arglists (quote ([posh-tree storage-key]))}, :name posh.lib.update/update-filter-q, :variadic false, :file "resources/public/js/compiled/out/posh/lib/update.cljc", :end-column 22, :method-params ([posh-tree storage-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 2, :fn-var true, :arglists (quote ([posh-tree storage-key]))}, filter-q-transform-analysis {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/update.cljc", :line 73, :column 7, :end-line 73, :end-column 34, :arglists (quote ([analysis]))}, :name posh.lib.update/filter-q-transform-analysis, :variadic false, :file "resources/public/js/compiled/out/posh/lib/update.cljc", :end-column 34, :method-params ([analysis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([analysis]))}, update-posh-item {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/lib/update.cljc", :line 85, :column 7, :end-line 85, :end-column 23, :arglists (quote ([posh-tree storage-key]))}, :name posh.lib.update/update-posh-item, :variadic false, :file "resources/public/js/compiled/out/posh/lib/update.cljc", :end-column 23, :method-params ([posh-tree storage-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 2, :fn-var true, :arglists (quote ([posh-tree storage-key]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:reload-fn :ref-patterns :patterns :retrieve :simple-patterns :dbvarmap :analysis $ :reload-patterns :dcfg :in :pass-patterns :results}, :order [:dcfg :retrieve :patterns :reload-patterns :reload-fn :ref-patterns :pass-patterns :results :simple-patterns :in $ :dbvarmap :analysis]}, :doc nil}