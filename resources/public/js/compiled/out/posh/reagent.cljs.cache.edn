{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {reaction reagent.ratom}, :excludes #{}, :name posh.reagent, :imports nil, :requires {p posh.core, ps posh.stateful, u posh.lib.update, reagent.ratom reagent.ratom, reagent.core reagent.core, r reagent.core, posh.lib.db posh.lib.db, datascript.core datascript.core, db posh.lib.db, posh.stateful posh.stateful, ra reagent.ratom, posh.core posh.core, posh.lib.update posh.lib.update, d datascript.core}, :cljs.spec/speced-vars [], :uses nil, :defs {safe-pull {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 16, :column 7, :end-line 16, :end-column 16, :arglists (quote ([db query id]))}, :name posh.reagent/safe-pull, :variadic false, :file "resources/public/js/compiled/out/posh/reagent.cljs", :end-column 16, :method-params ([db query id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 3, :fn-var true, :arglists (quote ([db query id]))}, pull {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 139, :column 7, :end-line 139, :end-column 11, :arglists (quote ([poshdb pull-pattern eid options] [poshdb pull-pattern eid])), :doc "Returns a reaction of a pull expression. The options argument may specify `:cache :forever`, which keeps query results\n  cached indefinitely, even if the reaction is disposed.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([poshdb pull-pattern eid options] [poshdb pull-pattern eid]), :arglists ([poshdb pull-pattern eid options] [poshdb pull-pattern eid]), :arglists-meta (nil nil)}}, :name posh.reagent/pull, :variadic false, :file "resources/public/js/compiled/out/posh/reagent.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([poshdb pull-pattern eid options] [poshdb pull-pattern eid]), :arglists ([poshdb pull-pattern eid options] [poshdb pull-pattern eid]), :arglists-meta (nil nil)}, :method-params ([poshdb pull-pattern eid options] [poshdb pull-pattern eid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 4, :fn-var true, :arglists ([poshdb pull-pattern eid options] [poshdb pull-pattern eid]), :doc "Returns a reaction of a pull expression. The options argument may specify `:cache :forever`, which keeps query results\n  cached indefinitely, even if the reaction is disposed."}, get-db {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 92, :column 7, :end-line 92, :end-column 13, :arglists (quote ([poshdb-or-conn]))}, :name posh.reagent/get-db, :variadic false, :file "resources/public/js/compiled/out/posh/reagent.cljs", :end-column 13, :method-params ([poshdb-or-conn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([poshdb-or-conn]))}, q-info {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 212, :column 7, :end-line 212, :end-column 13, :arglists (quote ([query & args])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(query args)], :arglists ([query & args]), :arglists-meta (nil)}}, :name posh.reagent/q-info, :variadic true, :file "resources/public/js/compiled/out/posh/reagent.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(query args)], :arglists ([query & args]), :arglists-meta (nil)}, :method-params [(query args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 1, :fn-var true, :arglists ([query & args])}, q-args-count {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 183, :column 7, :end-line 183, :end-column 19, :arglists (quote ([query]))}, :name posh.reagent/q-args-count, :variadic false, :file "resources/public/js/compiled/out/posh/reagent.cljs", :end-column 19, :method-params ([query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 183, :end-line 183, :max-fixed-arity 1, :fn-var true, :arglists (quote ([query]))}, q {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 191, :column 7, :end-line 191, :end-column 8, :arglists (quote ([query & args])), :doc "Returns a datalog query reaction. If args count doens't match the query's input count, a final options map argument\n  is accepted. This options map may specify `:cache :forever`, which keeps query results cached even if the reaction is\n  disposed.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(query args)], :arglists ([query & args]), :arglists-meta (nil)}}, :name posh.reagent/q, :variadic true, :file "resources/public/js/compiled/out/posh/reagent.cljs", :end-column 8, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(query args)], :arglists ([query & args]), :arglists-meta (nil)}, :method-params [(query args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 1, :fn-var true, :arglists ([query & args]), :doc "Returns a datalog query reaction. If args count doens't match the query's input count, a final options map argument\n  is accepted. This options map may specify `:cache :forever`, which keeps query results cached even if the reaction is\n  disposed."}, set-conn-listener! {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 40, :column 7, :end-line 40, :end-column 25, :arglists (quote ([posh-atom conn db-id]))}, :name posh.reagent/set-conn-listener!, :variadic false, :file "resources/public/js/compiled/out/posh/reagent.cljs", :end-column 25, :method-params ([posh-atom conn db-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 3, :fn-var true, :arglists (quote ([posh-atom conn db-id]))}, get-posh-atom {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 87, :column 7, :end-line 87, :end-column 20, :arglists (quote ([poshdb-or-conn]))}, :name posh.reagent/get-posh-atom, :variadic false, :file "resources/public/js/compiled/out/posh/reagent.cljs", :end-column 20, :method-params ([poshdb-or-conn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([poshdb-or-conn]))}, rm-posh-item {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 99, :column 7, :end-line 99, :end-column 19, :arglists (quote ([posh-atom storage-key]))}, :name posh.reagent/rm-posh-item, :variadic false, :file "resources/public/js/compiled/out/posh/reagent.cljs", :end-column 19, :method-params ([posh-atom storage-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 2, :fn-var true, :arglists (quote ([posh-atom storage-key]))}, pull-info {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 153, :column 7, :end-line 153, :end-column 16, :arglists (quote ([poshdb pull-pattern eid]))}, :name posh.reagent/pull-info, :variadic false, :file "resources/public/js/compiled/out/posh/reagent.cljs", :end-column 16, :method-params ([poshdb pull-pattern eid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 3, :fn-var true, :arglists (quote ([poshdb pull-pattern eid]))}, parse-q-query {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 168, :column 7, :end-line 168, :end-column 20, :arglists (quote ([query]))}, :name posh.reagent/parse-q-query, :variadic false, :file "resources/public/js/compiled/out/posh/reagent.cljs", :end-column 20, :method-params ([query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 1, :fn-var true, :arglists (quote ([query]))}, transact! {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 239, :column 7, :end-line 239, :end-column 16, :arglists (quote ([poshdb-or-conn txs]))}, :name posh.reagent/transact!, :variadic false, :file "resources/public/js/compiled/out/posh/reagent.cljs", :end-column 16, :method-params ([poshdb-or-conn txs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 239, :end-line 239, :max-fixed-arity 2, :fn-var true, :arglists (quote ([poshdb-or-conn txs]))}, filter-pull {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 230, :column 7, :end-line 230, :end-column 18, :arglists (quote ([poshdb pull-pattern eid]))}, :name posh.reagent/filter-pull, :variadic false, :file "resources/public/js/compiled/out/posh/reagent.cljs", :end-column 18, :method-params ([poshdb pull-pattern eid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 230, :end-line 230, :max-fixed-arity 3, :fn-var true, :arglists (quote ([poshdb pull-pattern eid]))}, q-tx {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 220, :column 7, :end-line 220, :end-column 11, :arglists (quote ([tx-patterns query & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(tx-patterns query args)], :arglists ([tx-patterns query & args]), :arglists-meta (nil)}}, :name posh.reagent/q-tx, :variadic true, :file "resources/public/js/compiled/out/posh/reagent.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(tx-patterns query args)], :arglists ([tx-patterns query & args]), :arglists-meta (nil)}, :method-params [(tx-patterns query args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 220, :end-line 220, :max-fixed-arity 2, :fn-var true, :arglists ([tx-patterns query & args])}, filter-q {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 233, :column 7, :end-line 233, :end-column 15, :arglists (quote ([query & args])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(query args)], :arglists ([query & args]), :arglists-meta (nil)}}, :name posh.reagent/filter-q, :variadic true, :file "resources/public/js/compiled/out/posh/reagent.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(query args)], :arglists ([query & args]), :arglists-meta (nil)}, :method-params [(query args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 233, :end-line 233, :max-fixed-arity 1, :fn-var true, :arglists ([query & args])}, pull-tx {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 161, :column 7, :end-line 161, :end-column 14, :arglists (quote ([tx-patterns poshdb pull-pattern eid]))}, :name posh.reagent/pull-tx, :variadic false, :file "resources/public/js/compiled/out/posh/reagent.cljs", :end-column 14, :method-params ([tx-patterns poshdb pull-pattern eid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 4, :fn-var true, :arglists (quote ([tx-patterns poshdb pull-pattern eid]))}, missing-pull-result {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 11, :column 7, :end-line 11, :end-column 26, :arglists (quote ([pull-expr]))}, :name posh.reagent/missing-pull-result, :variadic false, :file "resources/public/js/compiled/out/posh/reagent.cljs", :end-column 26, :method-params ([pull-expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pull-expr]))}, posh! {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 63, :column 7, :end-line 63, :end-column 12, :arglists (quote ([& conns])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(conns)], :arglists ([& conns]), :arglists-meta (nil)}}, :name posh.reagent/posh!, :variadic true, :file "resources/public/js/compiled/out/posh/reagent.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(conns)], :arglists ([& conns]), :arglists-meta (nil)}, :method-params [(conns)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 0, :fn-var true, :arglists ([& conns])}, filter-tx {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 227, :column 7, :end-line 227, :end-column 16, :arglists (quote ([poshdb tx-patterns]))}, :name posh.reagent/filter-tx, :variadic false, :file "resources/public/js/compiled/out/posh/reagent.cljs", :end-column 16, :method-params ([poshdb tx-patterns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 2, :fn-var true, :arglists (quote ([poshdb tx-patterns]))}, get-conn-var {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 84, :column 7, :end-line 84, :end-column 19, :arglists (quote ([conn var]))}, :name posh.reagent/get-conn-var, :variadic false, :file "resources/public/js/compiled/out/posh/reagent.cljs", :end-column 19, :method-params ([conn var]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 2, :fn-var true, :arglists (quote ([conn var]))}, make-query-reaction {:protocol-inline nil, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 106, :column 7, :end-line 106, :end-column 26, :arglists (quote ([posh-atom storage-key add-query-fn options] [posh-atom storage-key add-query-fn])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([posh-atom storage-key add-query-fn options] [posh-atom storage-key add-query-fn]), :arglists ([posh-atom storage-key add-query-fn options] [posh-atom storage-key add-query-fn]), :arglists-meta (nil nil)}}, :name posh.reagent/make-query-reaction, :variadic false, :file "resources/public/js/compiled/out/posh/reagent.cljs", :end-column 26, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([posh-atom storage-key add-query-fn options] [posh-atom storage-key add-query-fn]), :arglists ([posh-atom storage-key add-query-fn options] [posh-atom storage-key add-query-fn]), :arglists-meta (nil nil)}, :method-params ([posh-atom storage-key add-query-fn options] [posh-atom storage-key add-query-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 4, :fn-var true, :arglists ([posh-atom storage-key add-query-fn options] [posh-atom storage-key add-query-fn])}, dcfg {:name posh.reagent/dcfg, :file "resources/public/js/compiled/out/posh/reagent.cljs", :line 29, :column 1, :end-line 29, :end-column 10, :meta {:file "/Users/bsunter/gdrive/code/clojurescript/re-posh/examples/todomvc/resources/public/js/compiled/out/posh/reagent.cljs", :line 29, :column 6, :end-line 29, :end-column 10}, :tag cljs.core/IMap}}, :cljs.spec/registry-ref [], :require-macros {reagent.ratom reagent.ratom, r reagent.core, reagent.core reagent.core, ra reagent.ratom}, :cljs.analyzer/constants {:seen #{:q :schema :posh-listener :db-id :reload-fn :else :forever :db :transact! :posh-dispenser :posh :filter :cache :posh-schema-listener :with :ratoms :changed :entid :db/id :posh-atom :on-dispose :pull :listeners :reactions :in :results}, :order [:db/id :db :pull :q :filter :with :entid :transact! :posh-atom :db-id :posh-dispenser :posh-schema-listener :schema :posh-listener :ratoms :changed :results :reactions :listeners :posh :cache :on-dispose :forever :reload-fn :in :else]}, :doc nil}